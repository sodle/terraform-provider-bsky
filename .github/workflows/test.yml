name: Tests
# This workflow sets up a PDS instance using Docker compose and runs the acceptance tests against it.

# The PDS instance is set up with Traefik for routing and TLS termination. This is required because
# the pds-admin script uses HTTPS to create an admin account.

# It uses a self-signed certificate for HTTPS and runs the PDS admin script to create an admin.

# If this becomes hard to maintain, an alternative would be to modify the pds-admin script after
# downloading it use HTTP, or an option could be added to the real pds-admin script to allow for
# easier testing.


# This GitHub action runs your tests for each pull request and push.
# Optionally, you can turn it on using a schedule for regular testing.
on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    paths-ignore:
      - 'README.md'

# Testing only needs permissions to read the repository contents.
permissions:
  contents: read

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: true
      - run: go mod download
      - run: go build -v .
      - name: Run linters
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: latest

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: true
      # We need the latest version of Terraform for our documentation generation to use
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_wrapper: false
      - run: make generate
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'make generate' command and commit."; exit 1)

  # create a testing PDS and run acceptance tests against it
  test:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        # test against oldest and latest Terraform versions
        terraform:
          - '1.0.*'
          - '1.12.*'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: true
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false
      - run: go mod download

      - name: Install openssl
        run: sudo apt-get install -y openssl ca-certificates

      - name: Generate secrets and create pds.env
        run: |
          # Generate secret environment variables
          export PDS_ADMIN_PASSWORD=$(openssl rand --hex 16)
          export PDS_JWT_SECRET=$(openssl rand --hex 16)
          export PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX=$(openssl ecparam --name secp256k1 --genkey --noout --outform DER | tail --bytes=+8 | head --bytes=32 | xxd --plain --cols 32)

          PDS_ENV_FILE=.github/workflows/docker/pds/pds.env
          mkdir -p .github/workflows/docker/pds

          echo "PDS_ADMIN_PASSWORD=${PDS_ADMIN_PASSWORD}" > $PDS_ENV_FILE
          echo "BSKY_ADMIN_PASSWORD=${PDS_ADMIN_PASSWORD}" >> $GITHUB_ENV
          echo "PDS_JWT_SECRET=${PDS_JWT_SECRET}" >> $PDS_ENV_FILE
          echo "PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX=${PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX}" >> $PDS_ENV_FILE
          echo "PDS_HOSTNAME=example.com" >> $PDS_ENV_FILE
          echo "BSKY_PDS_HOST=https://example.com" >> $GITHUB_ENV

          # Values from https://code.modernleft.org/gravityfargo/bluesky-pds-docker/src/commit/2f574565d72d62fc47334cb9f5495b3f72ba91de/Dockerfile#L41-L54
          echo "PDS_DATA_DIRECTORY=/pds" >> $PDS_ENV_FILE
          echo "PDS_BLOBSTORE_DISK_LOCATION=/pds/blocks" >> $PDS_ENV_FILE
          echo "PDS_BLOB_UPLOAD_LIMIT=52428800" >> $PDS_ENV_FILE
          echo "PDS_DID_PLC_URL=https://plc.directory" >> $PDS_ENV_FILE
          echo "PDS_BSKY_APP_VIEW_URL=https://api.bsky.app" >> $PDS_ENV_FILE
          echo "PDS_BSKY_APP_VIEW_DID=did:web:api.bsky.app" >> $PDS_ENV_FILE
          echo "PDS_REPORT_SERVICE_URL=https://mod.bsky.app" >> $PDS_ENV_FILE
          echo "PDS_REPORT_SERVICE_DID=did:plc:ar7c4by46qjdydhdevvrndac" >> $PDS_ENV_FILE
          echo "PDS_CRAWLERS=https://bsky.network" >> $PDS_ENV_FILE
          echo "LOG_ENABLED=true" >> $PDS_ENV_FILE

      - name: Generate and trust a self-signed certificate for Traefik
        run: |
          # mkdir -p .github/workflows/docker/certs
          openssl req -x509 -newkey rsa:4096 -sha256 -days 1 -nodes \
            -addext "subjectAltName=DNS:example.com" \
            -keyout .github/workflows/docker/certs/traefik.key \
            -out .github/workflows/docker/certs/traefik.crt \
            -subj "/CN=example.com"

          sudo cp .github/workflows/docker/certs/traefik.crt /usr/local/share/ca-certificates/traefik.crt
          sudo update-ca-certificates

      - name: Start services with Docker Compose
        id: start_pds
        run: |
          docker compose -f .github/workflows/docker/docker-compose.yml up -d
          PDS_CONTAINER_ID=$(docker compose -f .github/workflows/docker/docker-compose.yml ps -q pds)
          echo "PDS_CONTAINER_ID=$PDS_CONTAINER_ID" >> $GITHUB_ENV
          echo "PDS_CONTAINER_ID=$PDS_CONTAINER_ID" >> $GITHUB_OUTPUT

      - name: Install workflow dependencies and update CA certificates in the PDS container
        run: |
          # from https://code.modernleft.org/gravityfargo/bluesky-pds-docker/src/commit/2f574565d72d62fc47334cb9f5495b3f72ba91de/Dockerfile#L71
          # dependencies for pdsadmin.sh, update-ca-certificates, and curl to fetch pdsadmin.sh
          # coretools was needed for pdsadmin.sh because it uses rm --force which is not in alpine
          docker exec $PDS_CONTAINER_ID apk add --no-cache bash coreutils dumb-init sudo curl ca-certificates gnupg jq openssl util-linux xxd sqlite
          docker exec $PDS_CONTAINER_ID update-ca-certificates # trust the Traefik cert

      - name: Download pdsadmin.sh
        run: |
          curl -fsSL -o pdsadmin.sh https://raw.githubusercontent.com/bluesky-social/pds/main/pdsadmin.sh

          docker cp pdsadmin.sh $PDS_CONTAINER_ID:/pds/pdsadmin.sh
          docker exec $PDS_CONTAINER_ID chmod +x /pds/pdsadmin.sh

      - name: Spin wait for Traefik+PDS to be healthy
        run: |
          for i in {1..5}; do
            STATUS=$(docker exec $PDS_CONTAINER_ID /bin/sh -c "curl -s -o /dev/null -w '%{http_code}' https://example.com/xrpc/_health" || true)
            if [ "$STATUS" = "200" ]; then
              echo "PDS is healthy inside the container!"
              exit 0
            fi
            echo "Waiting for PDS... ($i/5)"
            sleep 1
          done
          echo "PDS did not become healthy in time" >&2
          docker exec $PDS_CONTAINER_ID /bin/sh -c "curl -v https://example.com/xrpc/_health" # output the error
          exit 1

      - name: Test PDS health endpoint from host
        run: |
          echo "127.0.0.1 example.com" | sudo tee -a /etc/hosts

          STATUS=$(curl -s -o /dev/null -w '%{http_code}' https://example.com/xrpc/_health)
          if [ "$STATUS" = "200" ]; then
            echo "PDS is healthy from host!"
            exit 0
          fi

          echo "PDS health endpoint not accessible from host" >&2
          docker exec $PDS_CONTAINER_ID /bin/sh -c "curl -v https://example.com/xrpc/_health" # output the error
          exit 1

      - name: Show Bluesky PDS container logs
        if: steps.start_pds.outputs.PDS_CONTAINER_ID != ''
        run: docker logs ${{ steps.start_pds.outputs.PDS_CONTAINER_ID }}

      - name: Create admin account
        run: |
          OUTPUT=$(docker exec $PDS_CONTAINER_ID /bin/bash -c "/pds/pdsadmin.sh account create admin@example.com adminhandle.example.com")
          echo "$OUTPUT"

          HANDLE=$(echo "$OUTPUT" | grep '^Handle' | awk '{print $3}')
          DID=$(echo "$OUTPUT" | grep '^DID' | awk '{print $3}')
          PASSWORD=$(echo "$OUTPUT" | grep '^Password' | awk '{print $3}')
          echo "BSKY_HANDLE=$HANDLE" >> $GITHUB_ENV
          echo "ADMIN_DID=$DID" >> $GITHUB_ENV
          echo "BSKY_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          
          if [ -z "$PASSWORD" ]; then
            echo "ERROR: Password not found in pdsadmin output"
            exit 1
          fi

      - name: Show Bluesky PDS container logs
        if: steps.start_pds.outputs.PDS_CONTAINER_ID != ''
        run: docker logs ${{ steps.start_pds.outputs.PDS_CONTAINER_ID }}

      - name: Show admin environment variables
        run: |
          echo "BSKY_PDS_HOST=$BSKY_PDS_HOST"
          echo "BSKY_HANDLE=$BSKY_HANDLE"
          echo "ADMIN_DID=$ADMIN_DID"
          echo "BSKY_PASSWORD=$BSKY_PASSWORD"
          echo "BSKY_ADMIN_PASSWORD=$BSKY_ADMIN_PASSWORD"
        env:
          BSKY_PDS_HOST: ${{ env.BSKY_PDS_HOST }}
          BSKY_HANDLE: ${{ env.BSKY_HANDLE }}
          ADMIN_DID: ${{ env.ADMIN_DID }}
          BSKY_PASSWORD: ${{ env.BSKY_PASSWORD }}
          BSKY_ADMIN_PASSWORD: ${{ env.BSKY_ADMIN_PASSWORD }}

      - name: Run acceptance tests
        run: |
          go test -v -cover -parallel=10 ./...
        timeout-minutes: 5
        env:
          TF_ACC: "1"
          BSKY_PDS_HOST: ${{ env.BSKY_PDS_HOST }}
          BSKY_HANDLE: ${{ env.BSKY_HANDLE }}
          BSKY_PASSWORD: ${{ env.BSKY_PASSWORD }}
          BSKY_ADMIN_PASSWORD: ${{ env.BSKY_ADMIN_PASSWORD }}
          BSKY_SKIP_APPVIEW_TESTS: "1"

      # uncomment to be able to debug the GitHub action by SSHing into the runner. See https://github.com/mxschmitt/action-tmate
      # - name: Setup tmate session
      #   if: always()
      #   uses: mxschmitt/action-tmate@v3
          
      - name: Show Bluesky PDS container logs
        if: steps.start_pds.outputs.PDS_CONTAINER_ID != ''
        run: docker logs ${{ steps.start_pds.outputs.PDS_CONTAINER_ID }}
