package provider

import (
	"context"
	"fmt"

	"github.com/bluesky-social/indigo/api/bsky"
	"github.com/bluesky-social/indigo/xrpc"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &listDataSource{}
	_ datasource.DataSourceWithConfigure = &listDataSource{}
)

// NewListDataSource is a helper function to simplify the provider implementation.
func NewListDataSource() datasource.DataSource {
	return &listDataSource{}
}

// listDataSource is the data source implementation.
type listDataSource struct {
	client *xrpc.Client
}

// listItemModel represents an item in a list.
type listItemModel struct {
	Did types.String `tfsdk:"did"`
	Uri types.String `tfsdk:"uri"`
}

// listDataSourceModel maps the data source schema data.
type listDataSourceModel struct {
	Avatar        types.String `tfsdk:"avatar"`
	Cid           types.String `tfsdk:"cid"`
	Description   types.String `tfsdk:"description"`
	ListItemCount types.Int64  `tfsdk:"list_item_count"`
	Name          types.String `tfsdk:"name"`
	Purpose       types.String `tfsdk:"purpose"`
	Uri           types.String `tfsdk:"uri"`

	Items []listItemModel `tfsdk:"items"`
}

// Metadata returns the data source type name.
func (d *listDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_list"
}

// Schema defines the schema for the data source.
func (d *listDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "A datasource to retrieve lists and their contents",
		Attributes: map[string]schema.Attribute{
			"avatar": schema.StringAttribute{
				MarkdownDescription: "The CDN URL for the list's avatar image",
				Computed:            true,
			},
			"cid": schema.StringAttribute{
				MarkdownDescription: "Commit ID generated by Bluesky",
				Computed:            true,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the list",
				Computed:            true,
			},
			"list_item_count": schema.Int64Attribute{
				MarkdownDescription: "Number of members in the list",
				Computed:            true,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "Title of the list",
				Computed:            true,
			},
			"purpose": schema.StringAttribute{
				MarkdownDescription: "Purpose of the list (moderation or curation)",
				Computed:            true,
			},
			"uri": schema.StringAttribute{
				MarkdownDescription: "Atproto URI",
				Required:            true,
			},

			"items": schema.ListNestedAttribute{
				Computed:            true,
				MarkdownDescription: "All members of the list as an array",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"did": schema.StringAttribute{
							MarkdownDescription: "DID of the user added to the list",
							Computed:            true,
						},
						"uri": schema.StringAttribute{
							MarkdownDescription: "Atproto URI",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

// Read refreshes the Terraform state with the latest data.
func (d *listDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data listDataSourceModel

	// Read Terraform configuration data into the model.
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	uri := data.Uri.ValueString()

	list, record, _, err := GetListFromURI(ctx, d.client, uri)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Read List",
			"Could not read list URI "+uri+": "+err.Error(),
		)
		return
	}

	// Set all fields, using empty values for optional fields if nil
	data.Avatar = types.StringValue("")
	if list.Avatar != nil {
		data.Avatar = types.StringValue(fmt.Sprintf("%v", list.Avatar))
	}

	// Handle nil pointer for Cid
	if record.Cid != nil {
		data.Cid = types.StringValue(*record.Cid)
	} else {
		data.Cid = types.StringValue("")
	}

	data.Description = types.StringValue("")
	if list.Description != nil {
		data.Description = types.StringValue(*list.Description)
	}

	data.ListItemCount = types.Int64Value(0)
	// Note: ListItemCount may not be available from repo API
	// We'll need to fetch list items separately

	data.Name = types.StringValue(list.Name)

	data.Purpose = types.StringValue("")
	if list.Purpose != nil {
		data.Purpose = types.StringValue(*list.Purpose)
	}

	data.Uri = types.StringValue(uri)

	// Initialize empty items slice to ensure it's never nil
	data.Items = []listItemModel{}

	// Use GraphGetList to get the items
	listWithItems, err := bsky.GraphGetList(ctx, d.client, "", 50, uri)
	if err == nil && listWithItems != nil {
		// Update the list item count if available
		if listWithItems.List.ListItemCount != nil {
			data.ListItemCount = types.Int64Value(*listWithItems.List.ListItemCount)
		}

		// Add the items
		for _, item := range listWithItems.Items {
			listItemData := listItemModel{
				Did: types.StringValue(item.Subject.Did),
				Uri: types.StringValue(item.Uri),
			}

			data.Items = append(data.Items, listItemData)
		}

		// Paginate through all items
		for listWithItems.Cursor != nil {
			listWithItems, err = bsky.GraphGetList(ctx, d.client, *listWithItems.Cursor, 50, uri)
			if err != nil {
				resp.Diagnostics.AddError(
					"Unable to Read List",
					err.Error(),
				)
				return
			}

			for _, item := range listWithItems.Items {
				listItemData := listItemModel{
					Did: types.StringValue(item.Subject.Did),
					Uri: types.StringValue(item.Uri),
				}

				data.Items = append(data.Items, listItemData)
			}
		}
	}

	// Set state
	diags := resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Configure adds the provider configured client to the data source.
func (d *listDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Add a nil check when handling ProviderData because Terraform
	// sets that data after it calls the ConfigureProvider RPC.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*xrpc.Client)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *xrpc.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}
